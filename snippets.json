{
  "reducer": {
    "prefix": "reducer",
    "body": [
      "import {",
      "  ${1:ACTION_TYPE}",
      "} from './constants';",
      "",
      "const initialState = {",
      "  ${2}: ${3:initialValue}",
      "}",
      "",
      "function ${TM_DIRECTORY/^.+\\\\([a-zA-Z])(.*)$/${1:/downcase}$2/}Reducer(state=initialState, action) {",
      "  switch (action.type){",
      "    case $1:",
      "      return {",
      "        ...state,",
      "        ${2:attribute}: action.${2}",
      "      }",
      "    default:",
      "      return state;",
      "  }",
      "}",
      "" ,
      "export default ${TM_DIRECTORY/^.+\\\\([a-zA-Z])(.*)$/${1:/downcase}$2/}Reducer;",
    ],
    "description": "React reducer"
    },

    "reducer case": {
      "prefix": "reducer-case",
      "body": [
        "case ${1:ACTION_TYPE}:",
        "  return {",
        "    ...state,",
        "    ${2:attribute}: action.${2}",
        "  }",
      ],
      "description": "React reducer case"
      },

  "container":  {
    "prefix": "container",
    "body": [
      "import { connect } from 'react-redux'",
      "import { ${1:action} } from './actions'",
      "import ${TM_DIRECTORY/^.+\\\\(.*)$/$1/} from '../../components/${TM_DIRECTORY/^.+\\\\(.*)$/$1/}/${TM_DIRECTORY/^.+\\\\(.*)$/$1/}'",
      "import getState from './selector'",
      "",
      "const mapStateToProps = state => {",
      "  return {",
      "    ...getState(state)",
      "  }",
      "}",
      "",
      "const mapDispatchToProps = dispatch => {",
      "  return {",
      "    on${1:/upcase}: (vars) => {",
      "      dispatch($1(vars))",
      "    },",
      "  }",
      "}",
      "",
      "const ${TM_DIRECTORY/^.+\\\\(.*)$/$1/}Container = connect(",
      "  mapStateToProps,",
      "  mapDispatchToProps",
      ")(${TM_DIRECTORY/^.+\\\\(.*)$/$1/})",
      "",
      "export default ${TM_DIRECTORY/^.+\\\\(.*)$/$1/}Container",
    ]
  },

  "selector": {
    "prefix": "selector",
    "body": [
      "const getState = (state) => {",
      "  return {",
      "    ${1:attribute}: state.${TM_DIRECTORY/^.+\\\\(.*)$/$1/}.$1,",
      "  }",
      "}",
      "",
      "export default getState",
    ]
  },

  "constants":{
    "prefix": "constants",
    "body": [
      "export const ${1:SOME_ACTION} = '${2:PROJECT_NAME}/${TM_DIRECTORY/^.+\\\\(.*)$/$1/}/$1';",
    ]
  },

  "actions": {
    "prefix": "actions",
    "body": [
      "import {",
      "  ${1:ACTION_TYPE},",
      "} from './constants'",
      "",
      "export function ${2:actionCreator}(${3:payload}){",
      "  return {",
      "    type: $1,",
      "    ${3:payload}$0",
      "  }",
      "}",
    ]
  },

  "actioncreator": {
    "prefix": "actioncreator",
    "body": [
      "export function ${1:actionCreator}(${3:payload}){",
      "  return {",
      "    type: ${2:ACTION_TYPE},",
      "    $3$0",
      "  }",
      "}",
    ]
  },

  "sagas": {
    "prefix": "sagas",
    "body": [
      "import { takeEvery, call, put } from 'redux-saga/effects'",
      "import { ${1:ACTION_TYPE_TO_WATCH} } from './constants'",
      "import {",
      "  ${2:action}Success,",
      "  ${2}Error",
      "} from './actions'",
      "import { ${4:apiCall} } from '../../api'",
      "",
      "",
      "function* ${2}Callback(action) {",
      "  try {",
      "    const response = yield call(${4}, ${5:action.payload});",
      "    yield put(${2}Success(response))",
      "  }",
      "  catch (error){",
      "    yield put(${2}Error(error))",
      "  }",
      "}",
      "",
      "function* watch$0${2}Requests() {",
      "  yield takeEvery(${1}, ${2}Callback)",
      "}",
      "",
      "export default watch$0${2}Requests",
    ]
  },

  "component": {
    "prefix": "component",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { connect } from 'react-redux'",
      "import { ${2:action} } from './actions'",
      "import getState from './selector'",
      "",
      "const ${TM_DIRECTORY/^.+\\\\(.*)$/$1/} = ({${1:props}}) =>{",
      "  return (",
      "    <div />$0",
      "  )",
      "}",
      "",
      "${TM_DIRECTORY/^.+\\\\(.*)$/$1/}.propTypes = {",
      "",
      "}",
      "",
      "const mapStateToProps = state => {",
      "  return {",
      "    ...getState(state)",
      "  }",
      "}",
      "",
      "const mapDispatchToProps = dispatch => {",
      "  return {",
      "    on${2}: (${3:vars}) => {",
      "      dispatch($2(${3}))",
      "    },",
      "  }",
      "}",
      "",
      "const ${TM_DIRECTORY/^.+\\\\(.*)$/$1/}Container = connect(",
      "  mapStateToProps,",
      "  mapDispatchToProps",
      ")(${TM_DIRECTORY/^.+\\\\(.*)$/$1/})",
      "",
      "export {${TM_DIRECTORY/^.+\\\\(.*)$/$1/}}",
      "export default ${TM_DIRECTORY/^.+\\\\(.*)$/$1/}Container",
    ]
  },

  "axios get": {
    "prefix": "axios-get",
    "body": [
      "export const get${1:Resource} = () => {",
        "  let token = getToken();",
        "  return axios({",
        "    url:'http://${2:127.0.0.1:8000}/${3:resourcePath}/',",
        "    method:'get',",
        "    ${4:headers: {\"Authorization\": \"JWT \" + token}}",
        "  })",
        "  .then(",
        "    response => {",
        "      return response.data",
        "    }",
        "  )",
        "  .catch(",
        "    error => {",
        "      if (error.response === undefined){",
        "        throw error.message;",
        "      }",
        "      else {",
        "        throw error.response.code;",
        "      }",
        "    }",
        "  )",
        "}",
    ]
  },
  
  "muimport": {
    "prefix": "muimport",
    "description": "Import a Material UI component",
    "body": [
      "import ${1:COMPONENT} from '@material-ui/core/${1}';"
    ]
  },

  "muimporticon": {
    "prefix": "muimporticon",
    "description": "Import a Material UI icon",
    "body": [
      "import ${1:COMPONENT}Icon from '@material-ui/icons/${1}';"
    ]
  },
}
